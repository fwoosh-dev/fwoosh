import React from "react";
export declare type Element<T extends keyof JSX.IntrinsicElements> = React.PropsWithoutRef<JSX.IntrinsicElements[T]>;
export declare const components: {
    readonly h1: ({ className, ...props }: Element<"h1">) => JSX.Element;
    readonly h2: ({ className, ...props }: Element<"h2">) => JSX.Element;
    readonly h3: ({ className, ...props }: Element<"h3">) => JSX.Element;
    readonly h4: ({ className, ...props }: Element<"h4">) => JSX.Element;
    readonly h5: ({ className, ...props }: Element<"h5">) => JSX.Element;
    readonly h6: ({ className, ...props }: Element<"h6">) => JSX.Element;
    readonly hr: "hr";
    readonly p: "p";
    readonly code: ({ className, style, ...props }: Element<"code">) => JSX.Element;
    readonly pre: ({ style, ...props }: Element<"pre">) => JSX.Element;
    readonly a: React.ForwardRefExoticComponent<Pick<React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "key" | keyof React.AnchorHTMLAttributes<HTMLAnchorElement>> & React.RefAttributes<HTMLAnchorElement>>;
    readonly ul: "ul";
    readonly ol: "ol";
    readonly li: "li";
    readonly blockquote: "blockquote";
    readonly img: "img";
    readonly table: "table";
    readonly th: "th";
    readonly tr: "tr";
    readonly td: "td";
};
export declare type Components = typeof components;
